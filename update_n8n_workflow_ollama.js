// Script pro √∫pravu N8N workflow - nahrazen√≠ OpenAI za Ollama

const fs = require('fs');

// Naƒç√≠st p≈Øvodn√≠ workflow
const workflow = JSON.parse(fs.readFileSync('advanced_document_recognition_n8n.json', 'utf8'));

// Naj√≠t a nahradit AI node
const aiNodeIndex = workflow.nodes.findIndex(node => node.id === 'aiDocumentAnalysis');

if (aiNodeIndex !== -1) {
  // Nahradit OpenAI node za Ollama HTTP Request
  workflow.nodes[aiNodeIndex] = {
    "parameters": {
      "method": "POST",
      "url": "http://host.docker.internal:11434/api/generate",
      "sendHeaders": true,
      "headerParameters": {
        "parameters": [
          {
            "name": "Content-Type",
            "value": "application/json"
          }
        ]
      },
      "sendBody": true,
      "specifyBody": "json",
      "jsonBody": `={
  "model": "llama3.3:70b",
  "prompt": "Jsi expert na anal√Ωzu business dokument≈Ø. Tv√Ωm √∫kolem je P≈òESNƒö urƒçit typ dokumentu a extrahovat kl√≠ƒçov√© informace.\\n\\nTYPY DOKUMENT≈Æ kter√© mus√≠≈° rozpoznat:\\n1. FAKTURA - da≈àov√Ω doklad s IƒåO, DIƒå, ƒç√°stkou k √∫hradƒõ\\n2. PROFORMA - p≈ôedfaktura, nen√≠ da≈àov√Ω doklad\\n3. BANKOVN√ç V√ùPIS - v√Ωpis z √∫ƒçtu s transakcemi\\n4. POTVRZEN√ç O PLATBƒö - potvrzen√≠ o p≈ôijat√©/odeslan√© platbƒõ\\n5. POTVRZEN√ç O P≈òEVODU - potvrzen√≠ bankovn√≠ho p≈ôevodu\\n6. SMLOUVA - pr√°vn√≠ dokument s podm√≠nkami\\n7. OBJEDN√ÅVKA - objedn√°vka zbo≈æ√≠/slu≈æeb\\n8. DODAC√ç LIST - potvrzen√≠ o dod√°n√≠\\n9. UPOM√çNKA - upom√≠nka k platbƒõ\\n10. JIN√ù - pokud nespad√° do v√Ω≈°e uveden√Ωch\\n\\nAnalyzuj tento dokument:\\nN√°zev souboru: {{ $('attachmentAnalysis').item.json.attachmentAnalysis.documentAttachments[0].filename }}\\nP≈ôedbƒõ≈æn√° klasifikace: {{ $('documentClassification').item.json.documentClassification.primaryType }}\\nObsah emailu:\\n{{ $('documentClassification').item.json.emailText }}\\n\\nVRA≈§ POUZE JSON bez dal≈°√≠ho textu:\\n{\\n  \\"documentType\\": \\"p≈ôesn√Ω_typ\\",\\n  \\"confidence\\": 0.0-1.0,\\n  \\"vendor\\": \\"n√°zev_dodavatele\\",\\n  \\"documentNumber\\": \\"ƒç√≠slo_dokumentu\\",\\n  \\"date\\": \\"datum_vystaven√≠\\",\\n  \\"amount\\": ƒç√≠slo_nebo_null,\\n  \\"currency\\": \\"CZK/EUR/USD\\",\\n  \\"variableSymbol\\": \\"VS_pokud_existuje\\",\\n  \\"dueDate\\": \\"datum_splatnosti\\",\\n  \\"extractedData\\": {}\\n}",
  "stream": false,
  "options": {
    "temperature": 0.1,
    "num_predict": 1000
  }
}`,
      "options": {
        "timeout": 60000
      }
    },
    "id": "ollamaAnalysis",
    "name": "Ollama Document Analysis (70B)",
    "type": "n8n-nodes-base.httpRequest",
    "typeVersion": 4.2,
    "position": [1800, 300]
  };
}

// Upravit preparePaperless node pro zpracov√°n√≠ Ollama odpovƒõdi
const preparePaperlessIndex = workflow.nodes.findIndex(node => node.id === 'preparePaperless');

if (preparePaperlessIndex !== -1) {
  // Upravit k√≥d pro parsov√°n√≠ Ollama odpovƒõdi
  const originalCode = workflow.nodes[preparePaperlessIndex].parameters.jsCode;
  const updatedCode = originalCode.replace(
    "const aiAnalysis = JSON.parse($('aiDocumentAnalysis').first().json.content || '{}');",
    `// Zpracovat Ollama odpovƒõƒè
const ollamaResponse = $('ollamaAnalysis').first().json;
let aiAnalysis = {};
try {
  // Ollama vrac√≠ JSON v poli 'response'
  const responseText = ollamaResponse.response || ollamaResponse.choices?.[0]?.message?.content || '{}';
  aiAnalysis = JSON.parse(responseText);
} catch (e) {
  console.error('Failed to parse Ollama response:', e);
  aiAnalysis = {};
}`
  );
  workflow.nodes[preparePaperlessIndex].parameters.jsCode = updatedCode;
}

// Upravit connections
if (workflow.connections['aiDocumentAnalysis']) {
  workflow.connections['ollamaAnalysis'] = workflow.connections['aiDocumentAnalysis'];
  delete workflow.connections['aiDocumentAnalysis'];
}

// Upravit odkazy na aiDocumentAnalysis
for (const [nodeName, connections] of Object.entries(workflow.connections)) {
  if (connections.main) {
    for (const mainConnections of connections.main) {
      for (const connection of mainConnections) {
        if (connection.node === 'aiDocumentAnalysis') {
          connection.node = 'ollamaAnalysis';
        }
      }
    }
  }
}

// Ulo≈æit upraven√Ω workflow
fs.writeFileSync('advanced_document_recognition_ollama_n8n.json', JSON.stringify(workflow, null, 2));

console.log('‚úÖ Workflow upraven pro Ollama!');
console.log('üìÑ Nov√Ω soubor: advanced_document_recognition_ollama_n8n.json');
console.log('ü§ñ Pou≈æ√≠v√° model: llama3.3:70b');
console.log('üîó API endpoint: http://host.docker.internal:11434/api/generate');