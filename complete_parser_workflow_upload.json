{
  "name": "PDF Parser Full Upload",
  "nodes": [
    {
      "parameters": {},
      "id": "manual",
      "name": "Start",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [200, 300]
    },
    {
      "parameters": {
        "command": "ls /Users/m.a.j.puzik/Desktop/*.pdf /Users/m.a.j.puzik/Downloads/*.pdf 2>/dev/null | head -10"
      },
      "id": "listPdfs",
      "name": "List PDFs",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [400, 300]
    },
    {
      "parameters": {
        "jsCode": "const files = ($json.stdout || '').split('\\n').filter(f => f.trim());\n\nif (files.length === 0) {\n  throw new Error('No PDF files found');\n}\n\nconst FILE_NUMBER = 1;\nconst selectedFile = files[FILE_NUMBER - 1];\n\nconsole.log('Available files:');\nfiles.forEach((f, i) => console.log(`${i+1}. ${f.split('/').pop()}`));\nconsole.log('\\nSelected: ' + selectedFile.split('/').pop());\n\nreturn [{json: {\n  filepath: selectedFile,\n  filename: selectedFile.split('/').pop()\n}}];"
      },
      "id": "selectFile",
      "name": "Select File",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [600, 300]
    },
    {
      "parameters": {
        "command": "=curl -X POST 'https://api.pdf.co/v1/file/upload/get-presigned-url' -H 'x-api-key: puzik@outlook.com_jBTKYojSItt25GcgtQakogOdYCwf63GXQDKUW46uhRQmJStwMG4ozND282mVn6Bf' -H 'Content-Type: application/json' -d '{\"name\": \"{{$json.filename}}\"}'"
      },
      "id": "getUploadUrl",
      "name": "Get Upload URL",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [800, 300]
    },
    {
      "parameters": {
        "jsCode": "const response = JSON.parse($json.stdout || '{}');\n\nif (!response.presignedUrl || !response.url) {\n  throw new Error('Failed to get upload URL');\n}\n\nreturn [{json: {\n  presignedUrl: response.presignedUrl,\n  fileUrl: response.url,\n  filepath: $node['selectFile'].json.filepath,\n  filename: $node['selectFile'].json.filename\n}}];"
      },
      "id": "parseUploadUrl",
      "name": "Parse Upload URL",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1000, 300]
    },
    {
      "parameters": {
        "command": "=curl -X PUT '{{$json.presignedUrl}}' --upload-file '{{$json.filepath}}' -H 'Content-Type: application/pdf'"
      },
      "id": "uploadFile",
      "name": "Upload File to PDF.co",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [1200, 300]
    },
    {
      "parameters": {
        "url": "https://api.pdf.co/v1/pdf/convert/to/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-api-key",
              "value": "puzik@outlook.com_jBTKYojSItt25GcgtQakogOdYCwf63GXQDKUW46uhRQmJStwMG4ozND282mVn6Bf"
            }
          ]
        },
        "sendBody": true,
        "bodyType": "json",
        "jsonBody": "={\"url\": \"{{$node['parseUploadUrl'].json.fileUrl}}\", \"inline\": true, \"async\": false}",
        "options": {}
      },
      "id": "extractText",
      "name": "Extract Text from PDF",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1400, 300],
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "const filepath = $node['selectFile'].json.filepath;\nconst filename = $node['selectFile'].json.filename;\n\nif ($json.error) {\n  return [{json: {\n    status: 'ERROR',\n    message: $json.message || 'PDF.co extraction failed',\n    filename: filename\n  }}];\n}\n\nconst text = ($json.body || $json.text || '');\nconst textLower = text.toLowerCase();\n\n// KLASIFIKACE TYPU DOKUMENTU\nlet docType = 'unknown';\nif (textLower.includes('faktura') || textLower.includes('invoice') || textLower.includes('daňový doklad')) docType = 'faktura';\nelse if (textLower.includes('účtenka') || textLower.includes('uctenka') || textLower.includes('receipt')) docType = 'uctenka';\nelse if (textLower.includes('výpis') || textLower.includes('vypis') || textLower.includes('statement')) docType = 'vypis';\nelse if (textLower.includes('smlouva') || textLower.includes('contract') || textLower.includes('dohoda')) docType = 'smlouva';\nelse if (textLower.includes('úřední') || textLower.includes('urednik') || textLower.includes('rozhodnutí')) docType = 'urednik';\n\n// NAJIT KORESPONDENTA\nlet correspondent = 'Unknown';\nif (textLower.includes('čsob') || textLower.includes('csob')) correspondent = 'CSOB';\nelse if (textLower.includes('komerční banka') || textLower.includes('komercni banka')) correspondent = 'Komercni banka';\nelse if (textLower.includes('česká spořitelna') || textLower.includes('ceska sporitelna')) correspondent = 'Ceska sporitelna';\nelse if (textLower.includes('raiffeisenbank')) correspondent = 'Raiffeisenbank';\nelse if (textLower.includes('moneta')) correspondent = 'Moneta';\nelse if (textLower.includes('alza')) correspondent = 'Alza';\nelse if (textLower.includes('lidl')) correspondent = 'Lidl';\nelse if (textLower.includes('kaufland')) correspondent = 'Kaufland';\nelse if (textLower.includes('tesco')) correspondent = 'Tesco';\nelse if (textLower.includes('amazon')) correspondent = 'Amazon';\n\n// PARSOVANI SPECIFICKYCH UDAJU PODLE TYPU\nconst customFields = {};\nconst tags = [docType];\n\nif (correspondent !== 'Unknown') {\n  tags.push(correspondent.toLowerCase().replace(/\\s+/g, '-'));\n}\n\n// PARSOVANI PRO FAKTURU\nif (docType === 'faktura') {\n  // ICO\n  const icoMatch = text.match(/IČO?:?\\s*(\\d{8})/i);\n  if (icoMatch) {\n    customFields.ico = icoMatch[1];\n    tags.push('ico-' + icoMatch[1]);\n  }\n  \n  // DIC\n  const dicMatch = text.match(/DIČ:?\\s*(CZ\\d{8,10})/i);\n  if (dicMatch) {\n    customFields.dic = dicMatch[1];\n    tags.push('dic-' + dicMatch[1].toLowerCase());\n  }\n  \n  // Cislo faktury\n  const invoiceMatch = text.match(/(?:číslo faktury|invoice number|faktura č\\.?|evidenční číslo):?\\s*([A-Z0-9\\-\\/]+)/i);\n  if (invoiceMatch) {\n    customFields.invoice_number = invoiceMatch[1];\n  }\n  \n  // Variabilni symbol\n  const vsMatch = text.match(/(?:VS|variabilní symbol|var\\.\\s*symbol):?\\s*(\\d+)/i);\n  if (vsMatch) {\n    customFields.variable_symbol = vsMatch[1];\n    tags.push('vs-' + vsMatch[1]);\n  }\n  \n  // Castka\n  const amountMatch = text.match(/(?:celkem k úhradě|celkem|total|k úhradě|částka celkem):?\\s*([\\d\\s]+[,.]?\\d*)\\s*(?:Kč|CZK|EUR)/i);\n  if (amountMatch) {\n    customFields.amount = amountMatch[1].replace(/\\s/g, '');\n    const amount = parseFloat(amountMatch[1].replace(/\\s/g, '').replace(',', '.'));\n    if (amount > 10000) tags.push('velka-faktura');\n    else tags.push('mala-faktura');\n  }\n  \n  // Datum vystaveni\n  const dateMatch = text.match(/(?:datum vystavení|date of issue|vystaveno|datum vydání):?\\s*(\\d{1,2}[\\.\\-]\\d{1,2}[\\.\\-]\\d{4})/i);\n  if (dateMatch) {\n    customFields.issue_date = dateMatch[1];\n  }\n  \n  // Datum splatnosti\n  const dueMatch = text.match(/(?:datum splatnosti|due date|splatnost|splatno):?\\s*(\\d{1,2}[\\.\\-]\\d{1,2}[\\.\\-]\\d{4})/i);\n  if (dueMatch) {\n    customFields.due_date = dueMatch[1];\n  }\n}\n\n// PARSOVANI PRO BANKOVNI VYPIS\nif (docType === 'vypis') {\n  // Cislo uctu\n  const accountMatch = text.match(/(?:číslo účtu|account number|č\\.ú\\.|číslo vašeho účtu):?\\s*([\\d\\-\\/]+)/i);\n  if (accountMatch) {\n    customFields.account_number = accountMatch[1];\n  }\n  \n  // Obdobi\n  const periodMatch = text.match(/(?:období|period|za období|výpis za):?\\s*([\\d\\.]+\\s*-\\s*[\\d\\.]+)/i);\n  if (periodMatch) {\n    customFields.period = periodMatch[1];\n  }\n  \n  // Pocatecni zustatek\n  const startMatch = text.match(/(?:počáteční zůstatek|opening balance|zůstatek k):?\\s*([\\d\\s]+[,.]?\\d*)\\s*(?:Kč|CZK)/i);\n  if (startMatch) {\n    customFields.opening_balance = startMatch[1].replace(/\\s/g, '');\n  }\n  \n  // Konecny zustatek\n  const endMatch = text.match(/(?:konečný zůstatek|closing balance|nový zůstatek|zůstatek ke dni):?\\s*([\\d\\s]+[,.]?\\d*)\\s*(?:Kč|CZK)/i);\n  if (endMatch) {\n    customFields.closing_balance = endMatch[1].replace(/\\s/g, '');\n  }\n  \n  // Mesic a rok\n  const monthMatch = text.match(/(?:leden|únor|březen|duben|květen|červen|červenec|srpen|září|říjen|listopad|prosinec)\\s+\\d{4}/i);\n  if (monthMatch) {\n    tags.push(monthMatch[0].toLowerCase().replace(/\\s+/g, '-'));\n  }\n}\n\n// PARSOVANI PRO UCTENKU\nif (docType === 'uctenka') {\n  // EET kod\n  const eetMatch = text.match(/(?:BKP|FIK|PKP):?\\s*([A-Z0-9\\-]+)/i);\n  if (eetMatch) {\n    customFields.eet_code = eetMatch[1];\n  }\n  \n  // Castka\n  const receiptAmountMatch = text.match(/(?:celkem|total|suma|k platbě):?\\s*([\\d\\s]+[,.]?\\d*)\\s*(?:Kč|CZK)/i);\n  if (receiptAmountMatch) {\n    customFields.amount = receiptAmountMatch[1].replace(/\\s/g, '');\n  }\n  \n  // Datum a cas\n  const dateTimeMatch = text.match(/(\\d{1,2}[\\.\\-]\\d{1,2}[\\.\\-]\\d{4})\\s+(\\d{1,2}:\\d{2})/i);\n  if (dateTimeMatch) {\n    customFields.date = dateTimeMatch[1];\n    customFields.time = dateTimeMatch[2];\n  }\n  \n  // Pokladna\n  const cashRegMatch = text.match(/(?:pokladna|kasa|terminal|pos):?\\s*([\\d\\w]+)/i);\n  if (cashRegMatch) {\n    customFields.cash_register = cashRegMatch[1];\n  }\n}\n\n// PARSOVANI PRO SMLOUVU\nif (docType === 'smlouva') {\n  // Cislo smlouvy\n  const contractMatch = text.match(/(?:číslo smlouvy|contract number|č\\.s\\.|smlouva č\\.):?\\s*([A-Z0-9\\-\\/]+)/i);\n  if (contractMatch) {\n    customFields.contract_number = contractMatch[1];\n  }\n  \n  // Datum uzavreni\n  const signDateMatch = text.match(/(?:uzavřeno dne|signed on|datum uzavření|podepsáno):?\\s*(\\d{1,2}[\\.\\-]\\d{1,2}[\\.\\-]\\d{4})/i);\n  if (signDateMatch) {\n    customFields.sign_date = signDateMatch[1];\n  }\n  \n  // Platnost od\n  const validFromMatch = text.match(/(?:platnost od|valid from|účinnost od):?\\s*(\\d{1,2}[\\.\\-]\\d{1,2}[\\.\\-]\\d{4})/i);\n  if (validFromMatch) {\n    customFields.valid_from = validFromMatch[1];\n  }\n  \n  // Platnost do\n  const validToMatch = text.match(/(?:platnost do|valid to|účinnost do|platí do):?\\s*(\\d{1,2}[\\.\\-]\\d{1,2}[\\.\\-]\\d{4})/i);\n  if (validToMatch) {\n    customFields.valid_to = validToMatch[1];\n  }\n}\n\n// OBECNE TAGY\nif (text.match(/2025/)) tags.push('2025');\nif (text.match(/2024/)) tags.push('2024');\nif (text.match(/2023/)) tags.push('2023');\n\nif (textLower.includes('dph') || textLower.includes('vat')) {\n  const vatMatch = text.match(/(\\d{1,2})\\s*%/i);\n  if (vatMatch) {\n    tags.push('dph-' + vatMatch[1]);\n  }\n}\n\nreturn [{json: {\n  status: 'SUCCESS',\n  filename: filename,\n  filepath: filepath,\n  document_type: docType,\n  correspondent: correspondent,\n  tags: [...new Set(tags)],\n  custom_fields: customFields,\n  text_length: text.length,\n  preview: text.substring(0, 500)\n}}];"
      },
      "id": "parseDocument",
      "name": "Parse Full Document",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1600, 300]
    },
    {
      "parameters": {
        "jsCode": "const data = $json;\n\nconst customFieldsJson = JSON.stringify(data.custom_fields);\n\nreturn [{json: {\n  filepath: data.filepath,\n  filename: data.filename,\n  title: data.filename.replace('.pdf', ''),\n  document_type: data.document_type,\n  correspondent: data.correspondent,\n  tags: data.tags.join(','),\n  custom_fields_json: customFieldsJson,\n  // Individual fields for display\n  invoice_number: data.custom_fields.invoice_number || '',\n  variable_symbol: data.custom_fields.variable_symbol || '',\n  amount: data.custom_fields.amount || '',\n  ico: data.custom_fields.ico || '',\n  dic: data.custom_fields.dic || '',\n  issue_date: data.custom_fields.issue_date || '',\n  due_date: data.custom_fields.due_date || '',\n  account_number: data.custom_fields.account_number || '',\n  period: data.custom_fields.period || '',\n  contract_number: data.custom_fields.contract_number || ''\n}}];"
      },
      "id": "preparePaperless",
      "name": "Prepare for Paperless",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1800, 300]
    },
    {
      "parameters": {
        "jsCode": "const parseData = $node['parseDocument'].json;\nconst paperlessData = $json;\n\nif (parseData.status === 'ERROR') {\n  return [{json: {\n    '❌ STATUS': 'EXTRACTION FAILED',\n    '📄 File': parseData.filename,\n    '⚠️ Error': parseData.message\n  }}];\n}\n\nreturn [{json: {\n  '✅ STATUS': 'COMPLETE SUCCESS',\n  '📄 File': parseData.filename,\n  '📑 Type': parseData.document_type,\n  '👤 Correspondent': parseData.correspondent,\n  '🏷️ Tags': parseData.tags.join(', '),\n  '📝 Custom Fields': JSON.stringify(parseData.custom_fields, null, 2),\n  '📊 Text Length': parseData.text_length + ' characters',\n  '💡 Preview': parseData.preview\n}}];"
      },
      "id": "finalResult",
      "name": "Final Result",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2000, 300]
    }
  ],
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "List PDFs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List PDFs": {
      "main": [
        [
          {
            "node": "Select File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select File": {
      "main": [
        [
          {
            "node": "Get Upload URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Upload URL": {
      "main": [
        [
          {
            "node": "Parse Upload URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Upload URL": {
      "main": [
        [
          {
            "node": "Upload File to PDF.co",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload File to PDF.co": {
      "main": [
        [
          {
            "node": "Extract Text from PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Text from PDF": {
      "main": [
        [
          {
            "node": "Parse Full Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Full Document": {
      "main": [
        [
          {
            "node": "Prepare for Paperless",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare for Paperless": {
      "main": [
        [
          {
            "node": "Final Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {},
  "id": "parser_full_upload"
}