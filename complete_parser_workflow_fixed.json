{
  "name": "PDF Parser Fixed Buffer",
  "nodes": [
    {
      "parameters": {},
      "id": "manual",
      "name": "Start",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [200, 300]
    },
    {
      "parameters": {
        "command": "ls /Users/m.a.j.puzik/Desktop/*.pdf 2>/dev/null | head -5"
      },
      "id": "listPdfs",
      "name": "List PDFs",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [400, 300]
    },
    {
      "parameters": {
        "jsCode": "const files = ($json.stdout || '').split('\\n').filter(f => f.trim());\n\nif (files.length === 0) {\n  throw new Error('No PDF files found');\n}\n\nconst FILE_NUMBER = 1;\nconst selectedFile = files[FILE_NUMBER - 1];\n\nconsole.log('Selected: ' + selectedFile);\n\nreturn [{json: {\n  filepath: selectedFile,\n  filename: selectedFile.split('/').pop()\n}}];"
      },
      "id": "selectFile",
      "name": "Select File",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [600, 300]
    },
    {
      "parameters": {
        "command": "=base64 '{{$json.filepath}}' | head -c 5000000"
      },
      "id": "base64encode",
      "name": "Base64 Encode Limited",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [800, 300],
      "continueOnFail": true
    },
    {
      "parameters": {
        "url": "https://api.pdf.co/v1/pdf/convert/to/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-api-key",
              "value": "puzik@outlook.com_jBTKYojSItt25GcgtQakogOdYCwf63GXQDKUW46uhRQmJStwMG4ozND282mVn6Bf"
            }
          ]
        },
        "sendBody": true,
        "bodyType": "json",
        "jsonBody": "={\"file\": \"data:application/pdf;base64,{{$json.stdout.replace(/\\n/g, '')}}\", \"inline\": true, \"pages\": \"0-2\"}",
        "options": {}
      },
      "id": "pdfcoExtract",
      "name": "PDFco Extract First Pages",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1000, 300],
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "const filepath = $node['selectFile'].json.filepath;\nconst filename = $node['selectFile'].json.filename;\n\nif ($json.error) {\n  return [{json: {\n    status: 'ERROR',\n    message: $json.message || 'PDF.co failed',\n    filename: filename\n  }}];\n}\n\nconst text = ($json.body || $json.text || '');\nconst textLower = text.toLowerCase();\n\n// KLASIFIKACE\nlet docType = 'unknown';\nif (textLower.includes('faktura') || textLower.includes('invoice')) docType = 'faktura';\nelse if (textLower.includes('√∫ƒçtenka') || textLower.includes('uctenka')) docType = 'uctenka';\nelse if (textLower.includes('v√Ωpis') || textLower.includes('vypis')) docType = 'vypis';\nelse if (textLower.includes('smlouva') || textLower.includes('contract')) docType = 'smlouva';\n\n// KORESPONDENT\nlet correspondent = 'Unknown';\nif (textLower.includes('ƒçsob') || textLower.includes('csob')) correspondent = 'CSOB';\nelse if (textLower.includes('alza')) correspondent = 'Alza';\nelse if (textLower.includes('lidl')) correspondent = 'Lidl';\n\n// CUSTOM FIELDS\nconst customFields = {};\nconst tags = [docType];\n\nif (correspondent !== 'Unknown') {\n  tags.push(correspondent.toLowerCase());\n}\n\n// PARSOVANI PRO FAKTURU\nif (docType === 'faktura') {\n  const icoMatch = text.match(/IƒåO?:?\\s*(\\d{8})/i);\n  if (icoMatch) {\n    customFields.ico = icoMatch[1];\n    tags.push('ico-' + icoMatch[1]);\n  }\n  \n  const dicMatch = text.match(/DIƒå:?\\s*(CZ\\d{8,10})/i);\n  if (dicMatch) {\n    customFields.dic = dicMatch[1];\n  }\n  \n  const vsMatch = text.match(/VS:?\\s*(\\d+)/i);\n  if (vsMatch) {\n    customFields.variable_symbol = vsMatch[1];\n    tags.push('vs-' + vsMatch[1]);\n  }\n  \n  const amountMatch = text.match(/celkem:?\\s*([\\d\\s]+[,.]?\\d*)\\s*(?:Kƒç|CZK)/i);\n  if (amountMatch) {\n    customFields.amount = amountMatch[1].replace(/\\s/g, '');\n  }\n}\n\n// PARSOVANI PRO VYPIS\nif (docType === 'vypis') {\n  const accountMatch = text.match(/ƒç\\.√∫\\.:?\\s*([\\d\\-\\/]+)/i);\n  if (accountMatch) {\n    customFields.account_number = accountMatch[1];\n  }\n}\n\nreturn [{json: {\n  status: 'SUCCESS',\n  filename: filename,\n  filepath: filepath,\n  document_type: docType,\n  correspondent: correspondent,\n  tags: [...new Set(tags)],\n  custom_fields: customFields,\n  text_length: text.length\n}}];"
      },
      "id": "parseDocument",
      "name": "Parse Document",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1200, 300]
    },
    {
      "parameters": {
        "jsCode": "const data = $json;\n\nreturn [{json: {\n  '‚úÖ STATUS': 'SUCCESS',\n  'üìÑ File': data.filename,\n  'üìë Type': data.document_type,\n  'üë§ Correspondent': data.correspondent,\n  'üè∑Ô∏è Tags': data.tags.join(', '),\n  'üìù Custom Fields': JSON.stringify(data.custom_fields, null, 2),\n  'üìä Text': data.text_length + ' chars'\n}}];"
      },
      "id": "result",
      "name": "Show Result",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1400, 300]
    }
  ],
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "List PDFs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List PDFs": {
      "main": [
        [
          {
            "node": "Select File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select File": {
      "main": [
        [
          {
            "node": "Base64 Encode Limited",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Base64 Encode Limited": {
      "main": [
        [
          {
            "node": "PDFco Extract First Pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PDFco Extract First Pages": {
      "main": [
        [
          {
            "node": "Parse Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Document": {
      "main": [
        [
          {
            "node": "Show Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {},
  "id": "parser_fixed_buffer"
}