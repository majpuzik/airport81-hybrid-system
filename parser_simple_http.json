{
  "name": "PDF Parser Simple HTTP",
  "nodes": [
    {
      "parameters": {},
      "id": "manual",
      "name": "Start",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [200, 300]
    },
    {
      "parameters": {
        "command": "pdftotext '/Users/m.a.j.puzik/Desktop/'*.pdf - 2>/dev/null | head -10000"
      },
      "id": "extractDirect",
      "name": "Extract Text Directly",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [400, 300]
    },
    {
      "parameters": {
        "jsCode": "const text = ($json.stdout || '');\nconst textLower = text.toLowerCase();\n\nif (text.length < 100) {\n  return [{json: {\n    '‚ùå STATUS': 'NO TEXT EXTRACTED',\n    '‚ö†Ô∏è Info': 'PDF might be scanned image - needs OCR'\n  }}];\n}\n\n// KLASIFIKACE\nlet docType = 'unknown';\nif (textLower.includes('faktura') || textLower.includes('invoice') || textLower.includes('da≈àov√Ω doklad')) docType = 'faktura';\nelse if (textLower.includes('√∫ƒçtenka') || textLower.includes('uctenka') || textLower.includes('receipt')) docType = 'uctenka';\nelse if (textLower.includes('v√Ωpis') || textLower.includes('vypis') || textLower.includes('statement')) docType = 'vypis';\nelse if (textLower.includes('smlouva') || textLower.includes('contract')) docType = 'smlouva';\nelse if (textLower.includes('√∫≈ôedn√≠') || textLower.includes('rozhodnut√≠')) docType = 'urednik';\n\n// KORESPONDENT\nlet correspondent = 'Unknown';\nif (textLower.includes('ƒçsob') || textLower.includes('csob')) correspondent = 'CSOB';\nelse if (textLower.includes('komerƒçn√≠ banka') || textLower.includes('komercni banka')) correspondent = 'KB';\nelse if (textLower.includes('ƒçesk√° spo≈ôitelna') || textLower.includes('ceska sporitelna')) correspondent = 'Ceska Sporitelna';\nelse if (textLower.includes('raiffeisenbank')) correspondent = 'Raiffeisenbank';\nelse if (textLower.includes('alza')) correspondent = 'Alza';\nelse if (textLower.includes('lidl')) correspondent = 'Lidl';\nelse if (textLower.includes('kaufland')) correspondent = 'Kaufland';\n\n// CUSTOM FIELDS\nconst customFields = {};\nconst tags = [docType];\n\nif (correspondent !== 'Unknown') {\n  tags.push(correspondent.toLowerCase().replace(/\\s+/g, '-'));\n}\n\n// PARSOVANI PRO FAKTURU\nif (docType === 'faktura') {\n  // ICO\n  const icoMatch = text.match(/IƒåO?:?\\s*(\\d{8})/i);\n  if (icoMatch) {\n    customFields.ico = icoMatch[1];\n    tags.push('ico-' + icoMatch[1]);\n  }\n  \n  // DIC\n  const dicMatch = text.match(/DIƒå:?\\s*(CZ\\d{8,10})/i);\n  if (dicMatch) {\n    customFields.dic = dicMatch[1];\n    tags.push('dic-' + dicMatch[1].toLowerCase());\n  }\n  \n  // Cislo faktury\n  const invoiceMatch = text.match(/(?:ƒç√≠slo faktury|invoice number|faktura ƒç\\.?|evidenƒçn√≠ ƒç√≠slo):?\\s*([A-Z0-9\\-\\/]+)/i);\n  if (invoiceMatch) {\n    customFields.invoice_number = invoiceMatch[1];\n  }\n  \n  // Variabilni symbol\n  const vsMatch = text.match(/(?:VS|variabiln√≠ symbol|var\\.\\s*symbol):?\\s*(\\d+)/i);\n  if (vsMatch) {\n    customFields.variable_symbol = vsMatch[1];\n    tags.push('vs-' + vsMatch[1]);\n  }\n  \n  // Castka\n  const amountMatch = text.match(/(?:celkem k √∫hradƒõ|celkem|total|k √∫hradƒõ):?\\s*([\\d\\s]+[,.]?\\d*)\\s*(?:Kƒç|CZK|EUR)/i);\n  if (amountMatch) {\n    customFields.amount = amountMatch[1].replace(/\\s/g, '');\n    const amount = parseFloat(amountMatch[1].replace(/\\s/g, '').replace(',', '.'));\n    if (amount > 10000) tags.push('velka-faktura');\n    else tags.push('mala-faktura');\n  }\n  \n  // Datum vystaveni\n  const dateMatch = text.match(/(?:datum vystaven√≠|date of issue|vystaveno):?\\s*(\\d{1,2}[\\.\\-]\\d{1,2}[\\.\\-]\\d{4})/i);\n  if (dateMatch) {\n    customFields.issue_date = dateMatch[1];\n  }\n  \n  // Datum splatnosti\n  const dueMatch = text.match(/(?:datum splatnosti|due date|splatnost):?\\s*(\\d{1,2}[\\.\\-]\\d{1,2}[\\.\\-]\\d{4})/i);\n  if (dueMatch) {\n    customFields.due_date = dueMatch[1];\n  }\n}\n\n// PARSOVANI PRO VYPIS\nif (docType === 'vypis') {\n  // Cislo uctu\n  const accountMatch = text.match(/(?:ƒç√≠slo √∫ƒçtu|account number|ƒç\\.√∫\\.):?\\s*([\\d\\-\\/]+)/i);\n  if (accountMatch) {\n    customFields.account_number = accountMatch[1];\n  }\n  \n  // Obdobi\n  const periodMatch = text.match(/(?:obdob√≠|period|za obdob√≠):?\\s*([\\d\\.]+\\s*-\\s*[\\d\\.]+)/i);\n  if (periodMatch) {\n    customFields.period = periodMatch[1];\n  }\n  \n  // Zustatky\n  const balanceMatch = text.match(/(?:z≈Østatek|balance):?\\s*([\\d\\s]+[,.]?\\d*)\\s*(?:Kƒç|CZK)/i);\n  if (balanceMatch) {\n    customFields.balance = balanceMatch[1].replace(/\\s/g, '');\n  }\n}\n\n// PARSOVANI PRO UCTENKU\nif (docType === 'uctenka') {\n  // EET kod\n  const eetMatch = text.match(/(?:BKP|FIK|PKP):?\\s*([A-Z0-9\\-]+)/i);\n  if (eetMatch) {\n    customFields.eet_code = eetMatch[1];\n  }\n  \n  // Castka\n  const receiptAmountMatch = text.match(/(?:celkem|total|suma):?\\s*([\\d\\s]+[,.]?\\d*)\\s*(?:Kƒç|CZK)/i);\n  if (receiptAmountMatch) {\n    customFields.amount = receiptAmountMatch[1].replace(/\\s/g, '');\n  }\n}\n\n// OBECNE TAGY\nif (text.match(/2025/)) tags.push('2025');\nif (text.match(/2024/)) tags.push('2024');\nif (text.match(/2023/)) tags.push('2023');\n\nreturn [{json: {\n  '‚úÖ STATUS': 'SUCCESS',\n  'üìë Type': docType,\n  'üë§ Correspondent': correspondent,\n  'üè∑Ô∏è Tags': tags.join(', '),\n  'üìù Custom Fields': JSON.stringify(customFields, null, 2),\n  'üìä Text Length': text.length + ' chars',\n  'üí° Preview': text.substring(0, 300)\n}}];"
      },
      "id": "parseAll",
      "name": "Parse All",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [600, 300]
    }
  ],
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Extract Text Directly",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Text Directly": {
      "main": [
        [
          {
            "node": "Parse All",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {},
  "id": "parser_simple"
}