{
  "name": "Email Office Document Processor",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 5
            }
          ]
        }
      },
      "id": "trigger",
      "name": "Every 5 minutes",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "message",
        "operation": "getAll",
        "q": "is:unread has:attachment",
        "format": "full"
      },
      "id": "gmail",
      "name": "Gmail - Get Unread with Attachments",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [450, 300]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "message",
        "operation": "getAll",
        "folderName": "Inbox",
        "filter": "hasAttachments eq true and isRead eq false"
      },
      "id": "outlook",
      "name": "Outlook - Get Unread with Attachments",
      "type": "n8n-nodes-base.microsoftOutlook",
      "typeVersion": 1.1,
      "position": [450, 450]
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {
              "field1": "id",
              "field2": "id"
            }
          ]
        },
        "options": {}
      },
      "id": "merge",
      "name": "Merge Gmail + Outlook",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [650, 375]
    },
    {
      "parameters": {
        "jsCode": "// Extract and analyze attachments\nconst items = [];\n\nfor (const item of $input.all()) {\n  const email = item.json;\n  const attachments = [];\n  \n  // Process Gmail attachments\n  if (email.payload && email.payload.parts) {\n    for (const part of email.payload.parts) {\n      if (part.filename && part.filename !== '') {\n        attachments.push({\n          filename: part.filename,\n          mimeType: part.mimeType,\n          size: part.body.size,\n          attachmentId: part.body.attachmentId,\n          source: 'gmail'\n        });\n      }\n    }\n  }\n  \n  // Process Outlook attachments\n  if (email.attachments) {\n    for (const attachment of email.attachments) {\n      attachments.push({\n        filename: attachment.name,\n        mimeType: attachment.contentType,\n        size: attachment.size,\n        attachmentId: attachment.id,\n        source: 'outlook'\n      });\n    }\n  }\n  \n  // Detect Office documents\n  const officeTypes = {\n    'docx': 'Word Document',\n    'doc': 'Word Document (Legacy)',\n    'xlsx': 'Excel Spreadsheet',\n    'xls': 'Excel Spreadsheet (Legacy)',\n    'pptx': 'PowerPoint Presentation',\n    'ppt': 'PowerPoint Presentation (Legacy)',\n    'pdf': 'PDF Document',\n    'odt': 'OpenDocument Text',\n    'ods': 'OpenDocument Spreadsheet'\n  };\n  \n  const officeAttachments = attachments.filter(att => {\n    const ext = att.filename.split('.').pop().toLowerCase();\n    return officeTypes[ext] !== undefined;\n  }).map(att => {\n    const ext = att.filename.split('.').pop().toLowerCase();\n    return {\n      ...att,\n      documentType: officeTypes[ext],\n      extension: ext\n    };\n  });\n  \n  if (officeAttachments.length > 0) {\n    items.push({\n      json: {\n        emailId: email.id || email.messageId,\n        subject: email.subject || email.payload?.headers?.find(h => h.name === 'Subject')?.value,\n        from: email.from || email.payload?.headers?.find(h => h.name === 'From')?.value,\n        date: email.receivedDateTime || email.internalDate,\n        attachments: officeAttachments,\n        totalOfficeDocuments: officeAttachments.length,\n        source: email.id ? 'outlook' : 'gmail'\n      }\n    });\n  }\n}\n\nreturn items;"
      },
      "id": "detectOffice",
      "name": "Detect Office Documents",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 375]
    },
    {
      "parameters": {
        "resource": "message",
        "operation": "downloadAttachment",
        "messageId": "={{ $json.emailId }}",
        "attachmentId": "={{ $json.attachments[0].attachmentId }}"
      },
      "id": "downloadGmail",
      "name": "Download Gmail Attachment",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [1050, 300],
      "disabled": false
    },
    {
      "parameters": {
        "resource": "messageAttachment",
        "operation": "download",
        "messageId": "={{ $json.emailId }}",
        "attachmentId": "={{ $json.attachments[0].attachmentId }}"
      },
      "id": "downloadOutlook",
      "name": "Download Outlook Attachment",
      "type": "n8n-nodes-base.microsoftOutlook",
      "typeVersion": 1.1,
      "position": [1050, 450],
      "disabled": false
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "source",
              "leftValue": "={{ $json.source }}",
              "rightValue": "gmail",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "router",
      "name": "Route by Source",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [1050, 375]
    },
    {
      "parameters": {
        "model": "gpt-4-turbo-preview",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "You are an expert document analyzer. Analyze the provided Office document and extract:\n1. Document type and format\n2. Main content summary\n3. Key information (dates, amounts, names, etc.)\n4. Document category (invoice, contract, report, etc.)\n5. Suggested actions\n\nProvide response in JSON format."
            },
            {
              "role": "user",
              "content": "Analyze this document:\nFilename: {{ $json.attachments[0].filename }}\nType: {{ $json.attachments[0].documentType }}\nSize: {{ $json.attachments[0].size }} bytes\n\n[Document content would be extracted here]"
            }
          ]
        },
        "options": {
          "temperature": 0.3,
          "responseFormat": {
            "values": {
              "type": "json_object"
            }
          }
        }
      },
      "id": "aiAnalysis",
      "name": "AI Document Analysis",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1.3,
      "position": [1250, 375]
    },
    {
      "parameters": {
        "jsCode": "// Categorize and sort emails based on document analysis\nconst item = $input.first();\nconst analysis = JSON.parse(item.json.content || '{}');\n\nconst categories = {\n  'invoice': {\n    folder: 'Invoices',\n    priority: 'high',\n    tags: ['finance', 'payment-required'],\n    action: 'process-payment'\n  },\n  'contract': {\n    folder: 'Contracts',\n    priority: 'high',\n    tags: ['legal', 'review-required'],\n    action: 'legal-review'\n  },\n  'report': {\n    folder: 'Reports',\n    priority: 'medium',\n    tags: ['information', 'archive'],\n    action: 'file'\n  },\n  'presentation': {\n    folder: 'Presentations',\n    priority: 'low',\n    tags: ['information'],\n    action: 'review'\n  },\n  'spreadsheet': {\n    folder: 'Data',\n    priority: 'medium',\n    tags: ['data', 'analysis'],\n    action: 'analyze'\n  }\n};\n\nconst category = analysis.category || 'other';\nconst sorting = categories[category] || {\n  folder: 'Other',\n  priority: 'low',\n  tags: ['uncategorized'],\n  action: 'review'\n};\n\nreturn {\n  json: {\n    ...item.json,\n    analysis: analysis,\n    sorting: sorting,\n    processedAt: new Date().toISOString()\n  }\n};"
      },
      "id": "categorize",
      "name": "Categorize Document",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1450, 375]
    },
    {
      "parameters": {
        "resource": "message",
        "operation": "addLabel",
        "messageId": "={{ $json.emailId }}",
        "labelIds": ["={{ $json.sorting.folder }}"]
      },
      "id": "labelGmail",
      "name": "Apply Gmail Label",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [1650, 300]
    },
    {
      "parameters": {
        "resource": "message",
        "operation": "move",
        "messageId": "={{ $json.emailId }}",
        "folderId": "={{ $json.sorting.folder }}"
      },
      "id": "moveOutlook",
      "name": "Move Outlook Message",
      "type": "n8n-nodes-base.microsoftOutlook",
      "typeVersion": 1.1,
      "position": [1650, 450]
    },
    {
      "parameters": {
        "channel": "#email-automation",
        "text": "ðŸ“§ New Office Document Processed\n\n*Subject:* {{ $json.subject }}\n*From:* {{ $json.from }}\n*Document:* {{ $json.attachments[0].filename }}\n*Type:* {{ $json.attachments[0].documentType }}\n*Category:* {{ $json.analysis.category }}\n*Action:* {{ $json.sorting.action }}\n*Filed to:* {{ $json.sorting.folder }}\n\n*Summary:* {{ $json.analysis.summary }}",
        "authentication": "accessToken",
        "otherOptions": {}
      },
      "id": "notify",
      "name": "Send Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.2,
      "position": [1850, 375]
    }
  ],
  "connections": {
    "trigger": {
      "main": [
        [
          {
            "node": "gmail",
            "type": "main",
            "index": 0
          },
          {
            "node": "outlook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "gmail": {
      "main": [
        [
          {
            "node": "merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "outlook": {
      "main": [
        [
          {
            "node": "merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "merge": {
      "main": [
        [
          {
            "node": "detectOffice",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "detectOffice": {
      "main": [
        [
          {
            "node": "router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "router": {
      "main": [
        [
          {
            "node": "downloadGmail",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "downloadOutlook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "downloadGmail": {
      "main": [
        [
          {
            "node": "aiAnalysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "downloadOutlook": {
      "main": [
        [
          {
            "node": "aiAnalysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "aiAnalysis": {
      "main": [
        [
          {
            "node": "categorize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "categorize": {
      "main": [
        [
          {
            "node": "router2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "router2": {
      "main": [
        [
          {
            "node": "labelGmail",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "moveOutlook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "labelGmail": {
      "main": [
        [
          {
            "node": "notify",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "moveOutlook": {
      "main": [
        [
          {
            "node": "notify",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "pinData": {},
  "versionId": "1.0.0",
  "triggerCount": 0,
  "tags": []
}